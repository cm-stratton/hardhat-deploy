{
  "contractName": "EIP173ProxyWithReceive",
  "sourceName": "solc_0.8/proxy/EIP173ProxyWithReceive.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ProxyImplementationUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x608060405260405162000c5d38038062000c5d8339810160408190526200002691620001f9565b82828262000034826200004c565b620000408382620000be565b505050505050620002f7565b60006200006660008051602062000c3d8339815191525490565b90508160008051602062000c3d83398151915255816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8054908390556040516001600160a01b0380851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a38151156200019b576000836001600160a01b031683604051620001429190620002d9565b600060405180830381855af49150503d80600081146200017f576040519150601f19603f3d011682016040523d82523d6000602084013e62000184565b606091505b505090508062000199573d806000803e806000fd5b505b505050565b80516001600160a01b0381168114620001b857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001f0578181015183820152602001620001d6565b50506000910152565b6000806000606084860312156200020f57600080fd5b6200021a84620001a0565b92506200022a60208501620001a0565b60408501519092506001600160401b03808211156200024857600080fd5b818601915086601f8301126200025d57600080fd5b815181811115620002725762000272620001bd565b604051601f8201601f19908116603f011681019083821181831017156200029d576200029d620001bd565b81604052828152896020848701011115620002b757600080fd5b620002ca836020830160208801620001d3565b80955050505050509250925092565b60008251620002ed818460208701620001d3565b9190910192915050565b61093680620003076000396000f3fe60806040526004361061005e5760003560e01c80634f1ef286116100435780634f1ef286146100c45780638da5cb5b146100d7578063f2fde38b1461011157610065565b806301ffc9a71461006f5780633659cfe6146100a457610065565b3661006557005b61006d610131565b005b34801561007b57600080fd5b5061008f61008a3660046107a6565b61017c565b60405190151581526020015b60405180910390f35b3480156100b057600080fd5b5061006d6100bf366004610811565b61034a565b61006d6100d236600461082c565b610421565b3480156100e357600080fd5b506100ec61051c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009b565b34801561011d57600080fd5b5061006d61012c366004610811565b61054b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460003681823780813683855af491503d8082833e828015610172578183f35b8183fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061020f57507f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b1561021c57506001919050565b7fffffffff00000000000000000000000000000000000000000000000000000000808316900361024e57506000919050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008416600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa925050508015610336575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610333918101906108af565b60015b6103435750600092915050565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b61041e816040518060200160405280600081525061060a565b50565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016103fc565b6105178383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061060a92505050565b505050565b60006105467fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610601576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016103fc565b61041e816106f9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80549083905560405173ffffffffffffffffffffffffffffffffffffffff80851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a38151156105175760008373ffffffffffffffffffffffffffffffffffffffff16836040516106a591906108d1565b600060405180830381855af49150503d80600081146106e0576040519150601f19603f3d011682016040523d82523d6000602084013e6106e5565b606091505b5050905080610176573d806000803e806000fd5b60006107237fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000602082840312156107b857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461034357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b919050565b60006020828403121561082357600080fd5b610343826107e8565b60008060006040848603121561084157600080fd5b61084a846107e8565b9250602084013567ffffffffffffffff8082111561086757600080fd5b818601915086601f83011261087b57600080fd5b81358181111561088a57600080fd5b87602082850101111561089c57600080fd5b6020830194508093505050509250925092565b6000602082840312156108c157600080fd5b8151801515811461034357600080fd5b6000825160005b818110156108f257602081860181015185830152016108d8565b50600092019182525091905056fea26469706673582212204ab67c9e3c966610f974eef3eeb7197c32c8ae0272a09812b90e7a0ccdbedb3b64736f6c63430008140033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x60806040526004361061005e5760003560e01c80634f1ef286116100435780634f1ef286146100c45780638da5cb5b146100d7578063f2fde38b1461011157610065565b806301ffc9a71461006f5780633659cfe6146100a457610065565b3661006557005b61006d610131565b005b34801561007b57600080fd5b5061008f61008a3660046107a6565b61017c565b60405190151581526020015b60405180910390f35b3480156100b057600080fd5b5061006d6100bf366004610811565b61034a565b61006d6100d236600461082c565b610421565b3480156100e357600080fd5b506100ec61051c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009b565b34801561011d57600080fd5b5061006d61012c366004610811565b61054b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460003681823780813683855af491503d8082833e828015610172578183f35b8183fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061020f57507f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b1561021c57506001919050565b7fffffffff00000000000000000000000000000000000000000000000000000000808316900361024e57506000919050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008416600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa925050508015610336575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610333918101906108af565b60015b6103435750600092915050565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b61041e816040518060200160405280600081525061060a565b50565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016103fc565b6105178383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061060a92505050565b505050565b60006105467fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610601576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016103fc565b61041e816106f9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80549083905560405173ffffffffffffffffffffffffffffffffffffffff80851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a38151156105175760008373ffffffffffffffffffffffffffffffffffffffff16836040516106a591906108d1565b600060405180830381855af49150503d80600081146106e0576040519150601f19603f3d011682016040523d82523d6000602084013e6106e5565b606091505b5050905080610176573d806000803e806000fd5b60006107237fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000602082840312156107b857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461034357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b919050565b60006020828403121561082357600080fd5b610343826107e8565b60008060006040848603121561084157600080fd5b61084a846107e8565b9250602084013567ffffffffffffffff8082111561086757600080fd5b818601915086601f83011261087b57600080fd5b81358181111561088a57600080fd5b87602082850101111561089c57600080fd5b6020830194508093505050509250925092565b6000602082840312156108c157600080fd5b8151801515811461034357600080fd5b6000825160005b818110156108f257602081860181015185830152016108d8565b50600092019182525091905056fea26469706673582212204ab67c9e3c966610f974eef3eeb7197c32c8ae0272a09812b90e7a0ccdbedb3b64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_3655": {
          "entryPoint": null,
          "id": 3655,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_3810": {
          "entryPoint": null,
          "id": 3810,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_owner_3771": {
          "entryPoint": null,
          "id": 3771,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_setImplementation_3930": {
          "entryPoint": 190,
          "id": 3930,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setOwner_3788": {
          "entryPoint": 76,
          "id": 3788,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_address_fromMemory": {
          "entryPoint": 416,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_addresst_bytes_memory_ptr_fromMemory": {
          "entryPoint": 505,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 729,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 467,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 445,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:1943:36",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:36",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "74:117:36",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "84:22:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "99:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "93:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "93:13:36"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "84:5:36"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "169:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "178:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "181:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "171:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "171:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "171:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "128:5:36"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "139:5:36"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "154:3:36",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "159:1:36",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "150:3:36"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "150:11:36"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "163:1:36",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "146:3:36"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "146:19:36"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "135:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "135:31:36"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "125:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "125:42:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "118:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "118:50:36"
                      },
                      "nodeType": "YulIf",
                      "src": "115:70:36"
                    }
                  ]
                },
                "name": "abi_decode_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "53:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "64:5:36",
                    "type": ""
                  }
                ],
                "src": "14:177:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "228:95:36",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "245:1:36",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "252:3:36",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "257:10:36",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "248:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "248:20:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "238:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "238:31:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "238:31:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "285:1:36",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "288:4:36",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "278:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "278:15:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "278:15:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "309:1:36",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "312:4:36",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "302:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "302:15:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "302:15:36"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "196:127:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "394:184:36",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "404:10:36",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "413:1:36",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "408:1:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "473:63:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "498:3:36"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "503:1:36"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "494:3:36"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "494:11:36"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "517:3:36"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "522:1:36"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "513:3:36"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "513:11:36"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "507:5:36"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "507:18:36"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "487:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "487:39:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "487:39:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "434:1:36"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "437:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "431:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "431:13:36"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "445:19:36",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "447:15:36",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "456:1:36"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "459:2:36",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "452:3:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "452:10:36"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "447:1:36"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "427:3:36",
                        "statements": []
                      },
                      "src": "423:113:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "556:3:36"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "561:6:36"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "552:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "552:16:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "570:1:36",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "545:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "545:27:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "545:27:36"
                    }
                  ]
                },
                "name": "copy_memory_to_memory_with_cleanup",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "372:3:36",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "377:3:36",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "382:6:36",
                    "type": ""
                  }
                ],
                "src": "328:250:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "707:942:36",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "753:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "762:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "765:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "755:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "755:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "755:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "728:7:36"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "737:9:36"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "724:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "724:23:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "749:2:36",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "720:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "720:32:36"
                      },
                      "nodeType": "YulIf",
                      "src": "717:52:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "778:50:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "818:9:36"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "788:29:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "788:40:36"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "778:6:36"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "837:59:36",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "881:9:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "892:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "877:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "877:18:36"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "847:29:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "847:49:36"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "837:6:36"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "905:39:36",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "929:9:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "940:2:36",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "925:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "925:18:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "919:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "919:25:36"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "909:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "953:28:36",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "971:2:36",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "975:1:36",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "967:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "967:10:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "979:1:36",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "963:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "963:18:36"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "957:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1008:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1017:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1020:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1010:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1010:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1010:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "996:6:36"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1004:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "993:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "993:14:36"
                      },
                      "nodeType": "YulIf",
                      "src": "990:34:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1033:32:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1047:9:36"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1058:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1043:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1043:22:36"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "1037:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1113:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1122:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1125:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1115:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1115:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1115:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1092:2:36"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1096:4:36",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1088:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1088:13:36"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1103:7:36"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1084:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1084:27:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1077:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1077:35:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1074:55:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1138:19:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1154:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1148:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1148:9:36"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "1142:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1180:22:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1182:16:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1182:18:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1182:18:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "1172:2:36"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1176:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1169:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1169:10:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1166:36:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1211:17:36",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1225:2:36",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "1221:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1221:7:36"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "1215:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1237:23:36",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1257:2:36",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1251:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1251:9:36"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "1241:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1269:71:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1291:6:36"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "1315:2:36"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1319:4:36",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1311:3:36"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1311:13:36"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "1326:2:36"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1307:3:36"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1307:22:36"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1331:2:36",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1303:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1303:31:36"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "1336:2:36"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1299:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1299:40:36"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1287:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1287:53:36"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "1273:10:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1399:22:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1401:16:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1401:18:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1401:18:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1358:10:36"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1370:2:36"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1355:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1355:18:36"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1378:10:36"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1390:6:36"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1375:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1375:22:36"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "1352:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1352:46:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1349:72:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1437:2:36",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "1441:10:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1430:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1430:22:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1430:22:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1468:6:36"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "1476:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1461:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1461:18:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1461:18:36"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1525:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1534:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1537:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1527:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1527:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1527:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1502:2:36"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "1506:2:36"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1498:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1498:11:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1511:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1494:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1494:20:36"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1516:7:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1491:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1491:33:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1488:53:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1589:2:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1593:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1585:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1585:11:36"
                          },
                          {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1602:6:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1610:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1598:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1598:15:36"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "1615:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "1550:34:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1550:68:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1550:68:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1627:16:36",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "1637:6:36"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1627:6:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_bytes_memory_ptr_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "657:9:36",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "668:7:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "680:6:36",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "688:6:36",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "696:6:36",
                    "type": ""
                  }
                ],
                "src": "583:1066:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1791:150:36",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1801:27:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1821:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1815:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1815:13:36"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "1805:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1876:6:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1884:4:36",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1872:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1872:17:36"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "1891:3:36"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1896:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "1837:34:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1837:66:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1837:66:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1912:23:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "1923:3:36"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1928:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1919:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1919:16:36"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "1912:3:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "1767:3:36",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1772:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "1783:3:36",
                    "type": ""
                  }
                ],
                "src": "1654:287:36"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        let offset := mload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value2 := memPtr\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}",
          "id": 36,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0xC5D CODESIZE SUB DUP1 PUSH3 0xC5D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0x1F9 JUMP JUMPDEST DUP3 DUP3 DUP3 PUSH3 0x34 DUP3 PUSH3 0x4C JUMP JUMPDEST PUSH3 0x40 DUP4 DUP3 PUSH3 0xBE JUMP JUMPDEST POP POP POP POP POP POP PUSH3 0x2F7 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x66 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xC3D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xC3D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 SWAP1 DUP4 AND SWAP1 PUSH32 0x5570D70A002632A7B0B3C9304CC89EFB62D8DA9ECA0DBD7752C83B7379068296 SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP2 MLOAD ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH3 0x142 SWAP2 SWAP1 PUSH3 0x2D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x17F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x184 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH3 0x199 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1F0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1D6 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x21A DUP5 PUSH3 0x1A0 JUMP JUMPDEST SWAP3 POP PUSH3 0x22A PUSH1 0x20 DUP6 ADD PUSH3 0x1A0 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x272 JUMPI PUSH3 0x272 PUSH3 0x1BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x29D JUMPI PUSH3 0x29D PUSH3 0x1BD JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2CA DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x1D3 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2ED DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1D3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x936 DUP1 PUSH3 0x307 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x111 JUMPI PUSH2 0x65 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xA4 JUMPI PUSH2 0x65 JUMP JUMPDEST CALLDATASIZE PUSH2 0x65 JUMPI STOP JUMPDEST PUSH2 0x6D PUSH2 0x131 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x17C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x6D PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x82C JUMP JUMPDEST PUSH2 0x421 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x51C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x0 CALLDATASIZE DUP2 DUP3 CALLDATACOPY DUP1 DUP2 CALLDATASIZE DUP4 DUP6 GAS DELEGATECALL SWAP2 POP RETURNDATASIZE DUP1 DUP3 DUP4 RETURNDATACOPY DUP3 DUP1 ISZERO PUSH2 0x172 JUMPI DUP2 DUP4 RETURN JUMPDEST DUP2 DUP4 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ DUP1 PUSH2 0x20F JUMPI POP PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST ISZERO PUSH2 0x21C JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP1 SUB PUSH2 0x24E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x336 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x333 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x343 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x41E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x60A JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x517 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x60A SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x546 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x41E DUP2 PUSH2 0x6F9 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 SWAP1 DUP4 AND SWAP1 PUSH32 0x5570D70A002632A7B0B3C9304CC89EFB62D8DA9ECA0DBD7752C83B7379068296 SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP2 MLOAD ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x6A5 SWAP2 SWAP1 PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x176 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x723 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SSTORE DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 DUP3 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84A DUP5 PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x8D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xB6 PUSH29 0x9E3C966610F974EEF3EEB7197C32C8AE0272A09812B90E7A0CCDBEDB3B PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER 0xB5 BALANCE 0x27 PUSH9 0x4A568B3173AE13B9F8 0xA6 ADD PUSH15 0x243E63B6E8EE1178D6A717850B5D61 SUB ",
      "sourceMap": "183:286:33:-:0;;;237:183;;;;;;;;;;;;;;;;;;:::i;:::-;375:21;398:12;412:4;746:23:32;398:12:33;746:9:32;:23::i;:::-;780:47;799:21;822:4;780:18;:47::i;:::-;609:226;;;237:183:33;;;183:286;;2993:353:32;3050:21;3074:8;-1:-1:-1;;;;;;;;;;;2894:73:32;;2714:271;3074:8;3050:32;;3258:8;-1:-1:-1;;;;;;;;;;;3183:84:32;3329:8;-1:-1:-1;;;;;3293:45:32;3314:13;-1:-1:-1;;;;;3293:45:32;;;;;;;;;;;3039:307;2993:353;:::o;1417:1093:35:-;1674:66;1668:73;;1854:93;;;;1975:69;;-1:-1:-1;;;;;1975:69:35;;;;;;;;;;1511:30;;1975:69;2061:11;;:15;2057:446;;2094:12;2112:17;-1:-1:-1;;;;;2112:30:35;2143:4;2112:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2093:55;;;2168:7;2163:329;;2337:16;2396:14;2393:1;;2375:36;2443:14;2393:1;2433:25;2163:329;2078:425;2057:446;1500:1010;1417:1093;;:::o;14:177:36:-;93:13;;-1:-1:-1;;;;;135:31:36;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:250;413:1;423:113;437:6;434:1;431:13;423:113;;;513:11;;;507:18;494:11;;;487:39;459:2;452:10;423:113;;;-1:-1:-1;;570:1:36;552:16;;545:27;328:250::o;583:1066::-;680:6;688;696;749:2;737:9;728:7;724:23;720:32;717:52;;;765:1;762;755:12;717:52;788:40;818:9;788:40;:::i;:::-;778:50;;847:49;892:2;881:9;877:18;847:49;:::i;:::-;940:2;925:18;;919:25;837:59;;-1:-1:-1;;;;;;993:14:36;;;990:34;;;1020:1;1017;1010:12;990:34;1058:6;1047:9;1043:22;1033:32;;1103:7;1096:4;1092:2;1088:13;1084:27;1074:55;;1125:1;1122;1115:12;1074:55;1154:2;1148:9;1176:2;1172;1169:10;1166:36;;;1182:18;;:::i;:::-;1257:2;1251:9;1225:2;1311:13;;-1:-1:-1;;1307:22:36;;;1331:2;1303:31;1299:40;1287:53;;;1355:18;;;1375:22;;;1352:46;1349:72;;;1401:18;;:::i;:::-;1441:10;1437:2;1430:22;1476:2;1468:6;1461:18;1516:7;1511:2;1506;1502;1498:11;1494:20;1491:33;1488:53;;;1537:1;1534;1527:12;1488:53;1550:68;1615:2;1610;1602:6;1598:15;1593:2;1589;1585:11;1550:68;:::i;:::-;1637:6;1627:16;;;;;;;583:1066;;;;;:::o;1654:287::-;1783:3;1821:6;1815:13;1837:66;1896:6;1891:3;1884:4;1876:6;1872:17;1837:66;:::i;:::-;1919:16;;;;;1654:287;-1:-1:-1;;1654:287:36:o;:::-;183:286:33;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_3815": {
          "entryPoint": null,
          "id": 3815,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_3889": {
          "entryPoint": null,
          "id": 3889,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_fallback_3894": {
          "entryPoint": 305,
          "id": 3894,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_owner_3771": {
          "entryPoint": null,
          "id": 3771,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_setImplementation_3930": {
          "entryPoint": 1546,
          "id": 3930,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setOwner_3788": {
          "entryPoint": 1785,
          "id": 3788,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@owner_3664": {
          "entryPoint": 1308,
          "id": 3664,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@supportsInterface_3711": {
          "entryPoint": 380,
          "id": 3711,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@transferOwnership_3723": {
          "entryPoint": 1355,
          "id": 3723,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@upgradeToAndCall_3751": {
          "entryPoint": 1057,
          "id": 3751,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@upgradeTo_3736": {
          "entryPoint": 842,
          "id": 3736,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_address": {
          "entryPoint": 2024,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 2065,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_bytes_calldata_ptr": {
          "entryPoint": 2092,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 2223,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes4": {
          "entryPoint": 1958,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 2257,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:3128:36",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:36",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "83:263:36",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "129:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "138:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "141:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "131:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "131:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "131:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "104:7:36"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "113:9:36"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "100:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "100:23:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "125:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "96:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "96:32:36"
                      },
                      "nodeType": "YulIf",
                      "src": "93:52:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "154:36:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "180:9:36"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "167:12:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "167:23:36"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "158:5:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "300:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "309:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "312:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "302:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "302:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "302:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "212:5:36"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "223:5:36"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "230:66:36",
                                    "type": "",
                                    "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "219:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "219:78:36"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "209:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "209:89:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "202:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "202:97:36"
                      },
                      "nodeType": "YulIf",
                      "src": "199:117:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "325:15:36",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "335:5:36"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "325:6:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes4",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "49:9:36",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "60:7:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "72:6:36",
                    "type": ""
                  }
                ],
                "src": "14:332:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "446:92:36",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "456:26:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "468:9:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "479:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "464:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "464:18:36"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "456:4:36"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "498:9:36"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "523:6:36"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "516:6:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "516:14:36"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "509:6:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "509:22:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "491:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "491:41:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "491:41:36"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "415:9:36",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "426:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "437:4:36",
                    "type": ""
                  }
                ],
                "src": "351:187:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "592:147:36",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "602:29:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "624:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "611:12:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "611:20:36"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "602:5:36"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "717:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "726:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "729:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "719:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "719:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "719:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "653:5:36"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "664:5:36"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "671:42:36",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "660:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "660:54:36"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "650:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "650:65:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "643:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "643:73:36"
                      },
                      "nodeType": "YulIf",
                      "src": "640:93:36"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "571:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "582:5:36",
                    "type": ""
                  }
                ],
                "src": "543:196:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "814:116:36",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "860:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "869:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "872:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "862:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "862:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "862:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "835:7:36"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "844:9:36"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "831:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "831:23:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "856:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "827:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "827:32:36"
                      },
                      "nodeType": "YulIf",
                      "src": "824:52:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "885:39:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "914:9:36"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "895:18:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "895:29:36"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "885:6:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "780:9:36",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "791:7:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "803:6:36",
                    "type": ""
                  }
                ],
                "src": "744:186:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1041:559:36",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1087:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1096:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1099:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1089:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1089:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1089:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1062:7:36"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1071:9:36"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1058:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1058:23:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1083:2:36",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1054:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1054:32:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1051:52:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1112:39:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1141:9:36"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1122:18:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1122:29:36"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1112:6:36"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1160:46:36",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1191:9:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1202:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1187:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1187:18:36"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1174:12:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1174:32:36"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1164:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1215:28:36",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1225:18:36",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "1219:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1270:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1279:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1282:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1272:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1272:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1272:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1258:6:36"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1266:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1255:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1255:14:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1252:34:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1295:32:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1309:9:36"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1320:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1305:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1305:22:36"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "1299:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1375:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1384:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1387:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1377:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1377:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1377:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1354:2:36"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1358:4:36",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1350:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1350:13:36"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1365:7:36"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1346:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1346:27:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1339:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1339:35:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1336:55:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1400:30:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1427:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1414:12:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1414:16:36"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "1404:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1457:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1466:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1469:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1459:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1459:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1459:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1445:6:36"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1453:2:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1442:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1442:14:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1439:34:36"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1523:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1532:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1535:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1525:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1525:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1525:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1496:2:36"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1500:6:36"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1492:3:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1492:15:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1509:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1488:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1488:24:36"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1514:7:36"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1485:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1485:37:36"
                      },
                      "nodeType": "YulIf",
                      "src": "1482:57:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1548:21:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1562:2:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1566:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1558:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1558:11:36"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1548:6:36"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1578:16:36",
                      "value": {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "1588:6:36"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1578:6:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "991:9:36",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1002:7:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1014:6:36",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1022:6:36",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1030:6:36",
                    "type": ""
                  }
                ],
                "src": "935:665:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1706:125:36",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1716:26:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1728:9:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1739:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1724:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1724:18:36"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1716:4:36"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1758:9:36"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1773:6:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1781:42:36",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1769:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1769:55:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1751:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1751:74:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1751:74:36"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1675:9:36",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1686:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1697:4:36",
                    "type": ""
                  }
                ],
                "src": "1605:226:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1935:149:36",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1945:26:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1957:9:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1968:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1953:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1953:18:36"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1945:4:36"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1987:9:36"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2002:6:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2010:66:36",
                                "type": "",
                                "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1998:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1998:79:36"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1980:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1980:98:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1980:98:36"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1904:9:36",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1915:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1926:4:36",
                    "type": ""
                  }
                ],
                "src": "1836:248:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2167:199:36",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2213:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2222:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2225:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2215:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2215:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2215:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2188:7:36"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2197:9:36"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2184:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2184:23:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2209:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2180:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2180:32:36"
                      },
                      "nodeType": "YulIf",
                      "src": "2177:52:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2238:29:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2257:9:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2251:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2251:16:36"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2242:5:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2320:16:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2329:1:36",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2332:1:36",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2322:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2322:12:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2322:12:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2289:5:36"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2310:5:36"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2303:6:36"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2303:13:36"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2296:6:36"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2296:21:36"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2286:2:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2286:32:36"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2279:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2279:40:36"
                      },
                      "nodeType": "YulIf",
                      "src": "2276:60:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2345:15:36",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2355:5:36"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2345:6:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2133:9:36",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2144:7:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2156:6:36",
                    "type": ""
                  }
                ],
                "src": "2089:277:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2545:164:36",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2562:9:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2573:2:36",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2555:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2555:21:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2555:21:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2596:9:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2607:2:36",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2592:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2592:18:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2612:2:36",
                            "type": "",
                            "value": "14"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2585:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2585:30:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2585:30:36"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2635:9:36"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2646:2:36",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2631:3:36"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2631:18:36"
                          },
                          {
                            "hexValue": "4e4f545f415554484f52495a4544",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2651:16:36",
                            "type": "",
                            "value": "NOT_AUTHORIZED"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2624:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2624:44:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2624:44:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2677:26:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2689:9:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2700:2:36",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2685:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2685:18:36"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2677:4:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2522:9:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2536:4:36",
                    "type": ""
                  }
                ],
                "src": "2371:338:36"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2851:275:36",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2861:27:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2881:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2875:5:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2875:13:36"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "2865:6:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2897:10:36",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2906:1:36",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "2901:1:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2968:77:36",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2993:3:36"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2998:1:36"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2989:3:36"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2989:11:36"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value0",
                                              "nodeType": "YulIdentifier",
                                              "src": "3016:6:36"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3024:1:36"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3012:3:36"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3012:14:36"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3028:4:36",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3008:3:36"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3008:25:36"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3002:5:36"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3002:32:36"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2982:6:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2982:53:36"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2982:53:36"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "2927:1:36"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2930:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2924:2:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2924:13:36"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2938:21:36",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2940:17:36",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "2949:1:36"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2952:4:36",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2945:3:36"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2945:12:36"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2940:1:36"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2920:3:36",
                        "statements": []
                      },
                      "src": "2916:129:36"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3054:26:36",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "3068:3:36"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3073:6:36"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3064:3:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3064:16:36"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "3058:2:36",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3096:2:36"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3100:1:36",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3089:6:36"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3089:13:36"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3089:13:36"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3111:9:36",
                      "value": {
                        "name": "_1",
                        "nodeType": "YulIdentifier",
                        "src": "3118:2:36"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "3111:3:36"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "2827:3:36",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2832:6:36",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "2843:3:36",
                    "type": ""
                  }
                ],
                "src": "2714:412:36"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"NOT_AUTHORIZED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n}",
          "id": 36,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x111 JUMPI PUSH2 0x65 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xA4 JUMPI PUSH2 0x65 JUMP JUMPDEST CALLDATASIZE PUSH2 0x65 JUMPI STOP JUMPDEST PUSH2 0x6D PUSH2 0x131 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x17C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x6D PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x82C JUMP JUMPDEST PUSH2 0x421 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x51C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x811 JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x0 CALLDATASIZE DUP2 DUP3 CALLDATACOPY DUP1 DUP2 CALLDATASIZE DUP4 DUP6 GAS DELEGATECALL SWAP2 POP RETURNDATASIZE DUP1 DUP3 DUP4 RETURNDATACOPY DUP3 DUP1 ISZERO PUSH2 0x172 JUMPI DUP2 DUP4 RETURN JUMPDEST DUP2 DUP4 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ DUP1 PUSH2 0x20F JUMPI POP PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST ISZERO PUSH2 0x21C JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP1 SUB PUSH2 0x24E JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x336 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x333 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x343 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x41E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x60A JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x517 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x60A SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x546 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F415554484F52495A4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x41E DUP2 PUSH2 0x6F9 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 SWAP1 DUP4 AND SWAP1 PUSH32 0x5570D70A002632A7B0B3C9304CC89EFB62D8DA9ECA0DBD7752C83B7379068296 SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP2 MLOAD ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x6A5 SWAP2 SWAP1 PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x176 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x723 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 SSTORE DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 DUP3 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84A DUP5 PUSH2 0x7E8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x8D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xB6 PUSH29 0x9E3C966610F974EEF3EEB7197C32C8AE0272A09812B90E7A0CCDBEDB3B PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
      "sourceMap": "183:286:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;610:11:35;:9;:11::i;:::-;183:286:33;1051:899:32;;;;;;;;;;-1:-1:-1;1051:899:32;;;;;:::i;:::-;;:::i;:::-;;;516:14:36;;509:22;491:41;;479:2;464:18;1051:899:32;;;;;;;;2068:125;;;;;;;;;;-1:-1:-1;2068:125:32;;;;;:::i;:::-;;:::i;2201:163::-;;;;;;:::i;:::-;;:::i;960:83::-;;;;;;;;;;;;;:::i;:::-;;;1781:42:36;1769:55;;;1751:74;;1739:2;1724:18;960:83:32;1605:226:36;1958:102:32;;;;;;;;;;-1:-1:-1;1958:102:32;;;;;:::i;:::-;;:::i;753:656:35:-;919:66;913:73;1018:3;1023:14;1018:3;;1000:38;1018:3;;1023:14;1018:3;1087:21;1080:5;1067:69;1052:84;;1163:16;1214:5;1018:3;;1193:27;1241:7;1262:57;;;;1370:5;1018:3;1360:16;1262:57;1298:5;1018:3;1288:16;1234:157;;;;;753:656::o;1051:899:32:-;1112:4;1133:16;;;;;;:36;;-1:-1:-1;1153:16:32;;;;;1133:36;1129:80;;;-1:-1:-1;1193:4:32;;1051:899;-1:-1:-1;1051:899:32:o;1129:80::-;1223:16;;;;;;1219:61;;-1:-1:-1;1263:5:32;;1051:899;-1:-1:-1;1051:899:32:o;1219:61::-;1438:66;1432:73;1796:36;;;;;2010:66:36;1998:79;;1796:36:32;;;1980:98:36;1796:32:32;;;;;;1953:18:36;;1796:36:32;;;;;;;;;;;;;;;;;;-1:-1:-1;1796:36:32;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1792:151;;-1:-1:-1;1926:5:32;;1051:899;-1:-1:-1;;1051:899:32:o;1792:151::-;1878:7;1051:899;-1:-1:-1;;;1051:899:32:o;2068:125::-;2900:66;2894:73;2529:22;;:10;:22;;;2521:49;;;;;;;2573:2:36;2521:49:32;;;2555:21:36;2612:2;2592:18;;;2585:30;2651:16;2631:18;;;2624:44;2685:18;;2521:49:32;;;;;;;;;2144:41:::1;2163:17;2144:41;;;;;;;;;;;::::0;:18:::1;:41::i;:::-;2068:125:::0;:::o;2201:163::-;2900:66;2894:73;2529:22;;:10;:22;;;2521:49;;;;;;;2573:2:36;2521:49:32;;;2555:21:36;2612:2;2592:18;;;2585:30;2651:16;2631:18;;;2624:44;2685:18;;2521:49:32;2371:338:36;2521:49:32;2313:43:::1;2332:17;2351:4;;2313:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;2313:18:32::1;::::0;-1:-1:-1;;;2313:43:32:i:1;:::-;2201:163:::0;;;:::o;960:83::-;1000:7;1027:8;2900:66;2894:73;;2714:271;1027:8;1020:15;;960:83;:::o;1958:102::-;2900:66;2894:73;2529:22;;:10;:22;;;2521:49;;;;;;;2573:2:36;2521:49:32;;;2555:21:36;2612:2;2592:18;;;2585:30;2651:16;2631:18;;;2624:44;2685:18;;2521:49:32;2371:338:36;2521:49:32;2033:19:::1;2043:8;2033:9;:19::i;1417:1093:35:-:0;1674:66;1668:73;;1854:93;;;;1975:69;;;;;;;;;;;;;1511:30;;1975:69;2061:11;;:15;2057:446;;2094:12;2112:17;:30;;2143:4;2112:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2093:55;;;2168:7;2163:329;;2337:16;2396:14;2393:1;;2375:36;2443:14;2393:1;2433:25;2993:353:32;3050:21;3074:8;2900:66;2894:73;;2714:271;3074:8;3050:32;;3258:8;3190:66;3183:84;3329:8;3293:45;;3314:13;3293:45;;;;;;;;;;;;3039:307;2993:353;:::o;14:332:36:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:196;611:20;;671:42;660:54;;650:65;;640:93;;729:1;726;719:12;640:93;543:196;;;:::o;744:186::-;803:6;856:2;844:9;835:7;831:23;827:32;824:52;;;872:1;869;862:12;824:52;895:29;914:9;895:29;:::i;935:665::-;1014:6;1022;1030;1083:2;1071:9;1062:7;1058:23;1054:32;1051:52;;;1099:1;1096;1089:12;1051:52;1122:29;1141:9;1122:29;:::i;:::-;1112:39;;1202:2;1191:9;1187:18;1174:32;1225:18;1266:2;1258:6;1255:14;1252:34;;;1282:1;1279;1272:12;1252:34;1320:6;1309:9;1305:22;1295:32;;1365:7;1358:4;1354:2;1350:13;1346:27;1336:55;;1387:1;1384;1377:12;1336:55;1427:2;1414:16;1453:2;1445:6;1442:14;1439:34;;;1469:1;1466;1459:12;1439:34;1514:7;1509:2;1500:6;1496:2;1492:15;1488:24;1485:37;1482:57;;;1535:1;1532;1525:12;1482:57;1566:2;1562;1558:11;1548:21;;1588:6;1578:16;;;;;935:665;;;;;:::o;2089:277::-;2156:6;2209:2;2197:9;2188:7;2184:23;2180:32;2177:52;;;2225:1;2222;2215:12;2177:52;2257:9;2251:16;2310:5;2303:13;2296:21;2289:5;2286:32;2276:60;;2332:1;2329;2322:12;2714:412;2843:3;2881:6;2875:13;2906:1;2916:129;2930:6;2927:1;2924:13;2916:129;;;3028:4;3012:14;;;3008:25;;3002:32;2989:11;;;2982:53;2945:12;2916:129;;;-1:-1:-1;3100:1:36;3064:16;;3089:13;;;-1:-1:-1;3064:16:36;2714:412;-1:-1:-1;2714:412:36:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "471600",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "": "infinite",
        "owner()": "2361",
        "supportsInterface(bytes4)": "infinite",
        "transferOwnership(address)": "28278",
        "upgradeTo(address)": "28306",
        "upgradeToAndCall(address,bytes)": "infinite"
      }
    },
    "methodIdentifiers": {
      "owner()": "8da5cb5b",
      "supportsInterface(bytes4)": "01ffc9a7",
      "transferOwnership(address)": "f2fde38b",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyImplementationUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Proxy implementing EIP173 for ownership management that accept ETH via receive\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.8/proxy/EIP173ProxyWithReceive.sol\":\"EIP173ProxyWithReceive\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"solc_0.8/proxy/EIP173Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\ninterface ERC165 {\\r\\n    function supportsInterface(bytes4 id) external view returns (bool);\\r\\n}\\r\\n\\r\\n///@notice Proxy implementing EIP173 for ownership management\\r\\ncontract EIP173Proxy is Proxy {\\r\\n    // ////////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // /////////////////////// CONSTRUCTOR //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    constructor(\\r\\n        address implementationAddress,\\r\\n        address ownerAddress,\\r\\n        bytes memory data\\r\\n    ) payable {\\r\\n        _setOwner(ownerAddress);\\r\\n        _setImplementation(implementationAddress, data);\\r\\n    }\\r\\n\\r\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return _owner();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\r\\n        if (id == 0x01ffc9a7 || id == 0x7f5828d0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (id == 0xFFFFFFFF) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        ERC165 implementation;\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            implementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n        }\\r\\n\\r\\n        // Technically this is not standard compliant as ERC-165 require 30,000 gas which that call cannot ensure\\r\\n        // because it is itself inside `supportsInterface` that might only get 30,000 gas.\\r\\n        // In practise this is unlikely to be an issue.\\r\\n        try implementation.supportsInterface(id) returns (bool support) {\\r\\n            return support;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function upgradeTo(address newImplementation) external onlyOwner {\\r\\n        _setImplementation(newImplementation, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable onlyOwner {\\r\\n        _setImplementation(newImplementation, data);\\r\\n    }\\r\\n\\r\\n    // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner(), \\\"NOT_AUTHORIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _owner() internal view returns (address adminAddress) {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        address previousOwner = _owner();\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newOwner)\\r\\n        }\\r\\n        emit OwnershipTransferred(previousOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd6319517bf94a08e900e9d14dddf8ccad75240445eaff69ef536fcd8cd5b34fc\",\"license\":\"MIT\"},\"solc_0.8/proxy/EIP173ProxyWithReceive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./EIP173Proxy.sol\\\";\\r\\n\\r\\n///@notice Proxy implementing EIP173 for ownership management that accept ETH via receive\\r\\ncontract EIP173ProxyWithReceive is EIP173Proxy {\\r\\n    constructor(\\r\\n        address implementationAddress,\\r\\n        address ownerAddress,\\r\\n        bytes memory data\\r\\n    ) payable EIP173Proxy(implementationAddress, ownerAddress, data) {}\\r\\n\\r\\n    receive() external payable override {}\\r\\n}\\r\\n\",\"keccak256\":\"0x665c7761e75acafaed6e11bec5847b00de616c27b4b7aaabc16243260d6ac9cb\",\"license\":\"MIT\"},\"solc_0.8/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n// EIP-1967\\r\\nabstract contract Proxy {\\r\\n    // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation);\\r\\n\\r\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        revert(\\\"ETHER_REJECTED\\\"); // explicit reject by default\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _fallback() internal {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            let implementationAddress := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n            calldatacopy(0x0, 0x0, calldatasize())\\r\\n            let success := delegatecall(gas(), implementationAddress, 0x0, calldatasize(), 0, 0)\\r\\n            let retSz := returndatasize()\\r\\n            returndatacopy(0, 0, retSz)\\r\\n            switch success\\r\\n            case 0 {\\r\\n                revert(0, retSz)\\r\\n            }\\r\\n            default {\\r\\n                return(0, retSz)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setImplementation(address newImplementation, bytes memory data) internal {\\r\\n        address previousImplementation;\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            previousImplementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, newImplementation)\\r\\n        }\\r\\n\\r\\n        emit ProxyImplementationUpdated(previousImplementation, newImplementation);\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            (bool success, ) = newImplementation.delegatecall(data);\\r\\n            if (!success) {\\r\\n                assembly {\\r\\n                    // This assembly ensure the revert contains the exact string data\\r\\n                    let returnDataSize := returndatasize()\\r\\n                    returndatacopy(0, 0, returnDataSize)\\r\\n                    revert(0, returnDataSize)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3c2b98d334ba0ecdab4da4425648418ec2bb7b3d440c988a1424daa1b1e32cb4\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Proxy implementing EIP173 for ownership management that accept ETH via receive",
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"solc_0.8/diamond/Diamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n*\\r\\n* Implementation of a diamond.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\ncontract Diamond {\\r\\n    struct Initialization {\\r\\n        address initContract;\\r\\n        bytes initData;\\r\\n    }\\r\\n\\r\\n    /// @notice This construct a diamond contract\\r\\n    /// @param _contractOwner the owner of the contract. With default DiamondCutFacet, this is the sole address allowed to make further cuts.\\r\\n    /// @param _diamondCut the list of facet to add\\r\\n    /// @param _initializations the list of initialization pair to execute. This allow to setup a contract with multiple level of independent initialization.\\r\\n    constructor(\\r\\n        address _contractOwner,\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        Initialization[] memory _initializations\\r\\n    ) payable {\\r\\n        if (_contractOwner != address(0)) {\\r\\n            LibDiamond.setContractOwner(_contractOwner);\\r\\n        }\\r\\n\\r\\n        LibDiamond.diamondCut(_diamondCut, address(0), \\\"\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _initializations.length; i++) {\\r\\n            LibDiamond.initializeDiamondCut(_initializations[i].initContract, _initializations[i].initData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        // get diamond storage\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        // get facet from function selector\\r\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        assembly {\\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/facets/DiamondCutFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract DiamondCutFacet is IDiamondCut {\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/facets/DiamondLoupeFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\nimport { LibDiamond } from  \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\r\\nimport { IERC165 } from \\\"../interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\r\\n    // Diamond Loupe Functions\\r\\n    ////////////////////////////////////////////////////////////////////\\r\\n    /// These functions are expected to be called frequently by tools.\\r\\n    //\\r\\n    // struct Facet {\\r\\n    //     address facetAddress;\\r\\n    //     bytes4[] functionSelectors;\\r\\n    // }\\r\\n\\r\\n    /// @notice Gets all facets and their selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external override view returns (Facet[] memory facets_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 numFacets = ds.facetAddresses.length;\\r\\n        facets_ = new Facet[](numFacets);\\r\\n        for (uint256 i; i < numFacets; i++) {\\r\\n            address facetAddress_ = ds.facetAddresses[i];\\r\\n            facets_[i].facetAddress = facetAddress_;\\r\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all the function selectors provided by a facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddresses_ = ds.facetAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\r\\n    }\\r\\n\\r\\n    // This implements ERC-165.\\r\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        return ds.supportedInterfaces[_interfaceId];\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/facets/DiamondLoupeFacetWithoutSupportsInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\r\\n\\r\\ncontract DiamondLoupeFacetWithoutSupportsInterface is IDiamondLoupe {\\r\\n    // Diamond Loupe Functions\\r\\n    ////////////////////////////////////////////////////////////////////\\r\\n    /// These functions are expected to be called frequently by tools.\\r\\n    //\\r\\n    // struct Facet {\\r\\n    //     address facetAddress;\\r\\n    //     bytes4[] functionSelectors;\\r\\n    // }\\r\\n\\r\\n    /// @notice Gets all facets and their selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view override returns (Facet[] memory facets_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 numFacets = ds.facetAddresses.length;\\r\\n        facets_ = new Facet[](numFacets);\\r\\n        for (uint256 i; i < numFacets; i++) {\\r\\n            address facetAddress_ = ds.facetAddresses[i];\\r\\n            facets_[i].facetAddress = facetAddress_;\\r\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all the function selectors provided by a facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view override returns (bytes4[] memory facetFunctionSelectors_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddresses_ = ds.facetAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/facets/OwnershipFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\r\\n\\r\\ncontract OwnershipFacet is IERC173 {\\r\\n    function transferOwnership(address _newOwner) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.setContractOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function owner() external override view returns (address owner_) {\\r\\n        owner_ = LibDiamond.contractOwner();\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/initializers/DiamondERC165Init.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract DiamondERC165Init {\\r\\n    /// @notice set or unset ERC165 using DiamondStorage.supportedInterfaces\\r\\n    /// @param interfaceIds list of interface id to set as supported\\r\\n    /// @param interfaceIdsToRemove list of interface id to unset as supported.\\r\\n    /// Technically, you can remove support of ERC165 by having the IERC165 id itself being part of that array.\\r\\n    function setERC165(bytes4[] calldata interfaceIds, bytes4[] calldata interfaceIdsToRemove) external {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n\\r\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\r\\n\\r\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\r\\n            ds.supportedInterfaces[interfaceIds[i]] = true;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < interfaceIdsToRemove.length; i++) {\\r\\n            ds.supportedInterfaces[interfaceIdsToRemove[i]] = false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/interfaces/IDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/interfaces/IDiamondLoupe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/interfaces/IERC173.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\n/* is ERC165 */\\r\\ninterface IERC173 {\\r\\n    /// @dev This emits when ownership of a contract changes.\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice Get the address of the owner\\r\\n    /// @return owner_ The address of the owner.\\r\\n    function owner() external view returns (address owner_);\\r\\n\\r\\n    /// @notice Set the address of the new owner of the contract\\r\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n    /// @param _newOwner The address of the new owner of the contract\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/libraries/LibDiamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();        \\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);            \\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }    \\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/diamond/UsingDiamondOwner.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract UsingDiamondOwner {\\r\\n    modifier onlyOwner() {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Context} from \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n    /**\\r\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n     * address.\\r\\n     *\\r\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n     * function revert if invoked through a proxy.\\r\\n     */\\r\\n    function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/interfaces/IERC1967.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/beacon/BeaconProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\r\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\r\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\r\\n *\\r\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\r\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\\r\\n *\\r\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\r\\n * the beacon to not upgrade the implementation maliciously.\\r\\n *\\r\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\r\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\r\\n */\\r\\ncontract BeaconProxy is Proxy {\\r\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\r\\n    address private immutable _beacon;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the proxy with `beacon`.\\r\\n     *\\r\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\r\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\r\\n     * constructor.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\r\\n     * - If `data` is empty, `msg.value` must be zero.\\r\\n     */\\r\\n    constructor(address beacon, bytes memory data) payable {\\r\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\r\\n        _beacon = beacon;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address of the associated beacon.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address) {\\r\\n        return IBeacon(_getBeacon()).implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the beacon.\\r\\n     */\\r\\n    function _getBeacon() internal view virtual returns (address) {\\r\\n        return _beacon;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {UpgradeableBeacon} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation() external view returns (address);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/beacon/UpgradeableBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\r\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\r\\n * implementation contract, which is where they will delegate all function calls.\\r\\n *\\r\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\r\\n */\\r\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\r\\n    address private _implementation;\\r\\n\\r\\n    /**\\r\\n     * @dev The `implementation` of the beacon is invalid.\\r\\n     */\\r\\n    error BeaconInvalidImplementation(address implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\\r\\n     */\\r\\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\\r\\n        _setImplementation(implementation_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function implementation() public view virtual returns (address) {\\r\\n        return _implementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the beacon to a new implementation.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - msg.sender must be the owner of the contract.\\r\\n     * - `newImplementation` must be a contract.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\r\\n        _setImplementation(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the implementation contract address for this beacon\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `newImplementation` must be a contract.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        if (newImplementation.code.length == 0) {\\r\\n            revert BeaconInvalidImplementation(newImplementation);\\r\\n        }\\r\\n        _implementation = newImplementation;\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/Clones.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\r\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\r\\n *\\r\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\r\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\r\\n *\\r\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\r\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\r\\n * deterministic method.\\r\\n */\\r\\nlibrary Clones {\\r\\n    /**\\r\\n     * @dev A clone instance deployment failed.\\r\\n     */\\r\\n    error ERC1167FailedCreateClone();\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\r\\n     *\\r\\n     * This function uses the create opcode, which should never revert.\\r\\n     */\\r\\n    function clone(address implementation) internal returns (address instance) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\r\\n            // of the `implementation` address with the bytecode before the address.\\r\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\r\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\r\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\r\\n            instance := create(0, 0x09, 0x37)\\r\\n        }\\r\\n        if (instance == address(0)) {\\r\\n            revert ERC1167FailedCreateClone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\r\\n     *\\r\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\r\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\r\\n     * the clones cannot be deployed twice at the same address.\\r\\n     */\\r\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\r\\n            // of the `implementation` address with the bytecode before the address.\\r\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\r\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\r\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\r\\n            instance := create2(0, 0x09, 0x37, salt)\\r\\n        }\\r\\n        if (instance == address(0)) {\\r\\n            revert ERC1167FailedCreateClone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\r\\n     */\\r\\n    function predictDeterministicAddress(\\r\\n        address implementation,\\r\\n        bytes32 salt,\\r\\n        address deployer\\r\\n    ) internal pure returns (address predicted) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(add(ptr, 0x38), deployer)\\r\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\r\\n            mstore(add(ptr, 0x14), implementation)\\r\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\r\\n            mstore(add(ptr, 0x58), salt)\\r\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\r\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\r\\n     */\\r\\n    function predictDeterministicAddress(\\r\\n        address implementation,\\r\\n        bytes32 salt\\r\\n    ) internal view returns (address predicted) {\\r\\n        return predictDeterministicAddress(implementation, salt, address(this));\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/ERC1967/ERC1967Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\r\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n */\\r\\ncontract ERC1967Proxy is Proxy {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\r\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `data` is empty, `msg.value` must be zero.\\r\\n     */\\r\\n    constructor(address implementation, bytes memory _data) payable {\\r\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\r\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address) {\\r\\n        return ERC1967Utils.getImplementation();\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/ERC1967/ERC1967Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\r\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\r\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n */\\r\\nlibrary ERC1967Utils {\\r\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\r\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the beacon is changed.\\r\\n     */\\r\\n    event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\r\\n     */\\r\\n    // solhint-disable-next-line private-vars-leading-underscore\\r\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev The `implementation` of the proxy is invalid.\\r\\n     */\\r\\n    error ERC1967InvalidImplementation(address implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev The `admin` of the proxy is invalid.\\r\\n     */\\r\\n    error ERC1967InvalidAdmin(address admin);\\r\\n\\r\\n    /**\\r\\n     * @dev The `beacon` of the proxy is invalid.\\r\\n     */\\r\\n    error ERC1967InvalidBeacon(address beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\r\\n     */\\r\\n    error ERC1967NonPayable();\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function getImplementation() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        if (newImplementation.code.length == 0) {\\r\\n            revert ERC1967InvalidImplementation(newImplementation);\\r\\n        }\\r\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\r\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\r\\n     * to avoid stuck value in the contract.\\r\\n     *\\r\\n     * Emits an {IERC1967-Upgraded} event.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        } else {\\r\\n            _checkNonPayable();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\r\\n     */\\r\\n    // solhint-disable-next-line private-vars-leading-underscore\\r\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\r\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n     */\\r\\n    function getAdmin() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        if (newAdmin == address(0)) {\\r\\n            revert ERC1967InvalidAdmin(address(0));\\r\\n        }\\r\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {IERC1967-AdminChanged} event.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) internal {\\r\\n        emit AdminChanged(getAdmin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\r\\n     */\\r\\n    // solhint-disable-next-line private-vars-leading-underscore\\r\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon.\\r\\n     */\\r\\n    function getBeacon() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n     */\\r\\n    function _setBeacon(address newBeacon) private {\\r\\n        if (newBeacon.code.length == 0) {\\r\\n            revert ERC1967InvalidBeacon(newBeacon);\\r\\n        }\\r\\n\\r\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\r\\n\\r\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\r\\n        if (beaconImplementation.code.length == 0) {\\r\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\r\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\r\\n     * to avoid stuck value in the contract.\\r\\n     *\\r\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\r\\n     *\\r\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\r\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\r\\n     * efficiency.\\r\\n     */\\r\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\r\\n        _setBeacon(newBeacon);\\r\\n        emit BeaconUpgraded(newBeacon);\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n        } else {\\r\\n            _checkNonPayable();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\r\\n     * if an upgrade doesn't perform an initialization call.\\r\\n     */\\r\\n    function _checkNonPayable() private {\\r\\n        if (msg.value > 0) {\\r\\n            revert ERC1967NonPayable();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\r\\n     * function and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/transparent/ProxyAdmin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/transparent/ProxyAdmin.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ITransparentUpgradeableProxy} from \\\"./TransparentUpgradeableProxy.sol\\\";\\r\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\r\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\r\\n */\\r\\ncontract ProxyAdmin is Ownable {\\r\\n    /**\\r\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address)`\\r\\n     * and `upgradeAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\r\\n     * while `upgradeAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\r\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeAndCall(address,bytes)` is present, and the second argument must\\r\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\r\\n     * during an upgrade.\\r\\n     */\\r\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the initial owner who can perform upgrades.\\r\\n     */\\r\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\\r\\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - This contract must be the admin of `proxy`.\\r\\n     * - If `data` is empty, `msg.value` must be zero.\\r\\n     */\\r\\n    function upgradeAndCall(\\r\\n        ITransparentUpgradeableProxy proxy,\\r\\n        address implementation,\\r\\n        bytes memory data\\r\\n    ) public payable virtual onlyOwner {\\r\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\r\\nimport {ERC1967Proxy} from \\\"../ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\r\\nimport {ProxyAdmin} from \\\"./ProxyAdmin.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\r\\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\\r\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\r\\n * include them in the ABI so this interface must be used to interact with it.\\r\\n */\\r\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\r\\n    function upgradeToAndCall(address, bytes calldata) external payable;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\\r\\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\\r\\n * the proxy admin cannot fallback to the target implementation.\\r\\n *\\r\\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\\r\\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\\r\\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\\r\\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\\r\\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\\r\\n *\\r\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\r\\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\\r\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\r\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\r\\n * implementation.\\r\\n *\\r\\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\\r\\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\\r\\n *\\r\\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\\r\\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\\r\\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\\r\\n * undesirable state where the admin slot is different from the actual admin.\\r\\n *\\r\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\\r\\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\\r\\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\\r\\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\r\\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\\r\\n    // at the expense of removing the ability to change the admin once it's set.\\r\\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\\r\\n    // with its own ability to transfer the permissions to another account.\\r\\n    address private immutable _admin;\\r\\n\\r\\n    /**\\r\\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\\r\\n     */\\r\\n    error ProxyDeniedAdminAccess();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\\r\\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\\r\\n     * {ERC1967Proxy-constructor}.\\r\\n     */\\r\\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\r\\n        _admin = address(new ProxyAdmin(initialOwner));\\r\\n        // Set the storage value and emit an event for ERC-1967 compatibility\\r\\n        ERC1967Utils.changeAdmin(_proxyAdmin());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin of this proxy.\\r\\n     */\\r\\n    function _proxyAdmin() internal virtual returns (address) {\\r\\n        return _admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\\r\\n     */\\r\\n    function _fallback() internal virtual override {\\r\\n        if (msg.sender == _proxyAdmin()) {\\r\\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\r\\n                revert ProxyDeniedAdminAccess();\\r\\n            } else {\\r\\n                _dispatchUpgradeToAndCall();\\r\\n            }\\r\\n        } else {\\r\\n            super._fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `data` is empty, `msg.value` must be zero.\\r\\n     */\\r\\n    function _dispatchUpgradeToAndCall() private {\\r\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\r\\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```solidity\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n *\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Storage of the initializable contract.\\r\\n     *\\r\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\r\\n     * when using with upgradeable contracts.\\r\\n     *\\r\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\r\\n     */\\r\\n    struct InitializableStorage {\\r\\n        /**\\r\\n         * @dev Indicates that the contract has been initialized.\\r\\n         */\\r\\n        uint64 _initialized;\\r\\n        /**\\r\\n         * @dev Indicates that the contract is in the process of being initialized.\\r\\n         */\\r\\n        bool _initializing;\\r\\n    }\\r\\n\\r\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\r\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\r\\n\\r\\n    /**\\r\\n     * @dev The contract is already initialized.\\r\\n     */\\r\\n    error InvalidInitialization();\\r\\n\\r\\n    /**\\r\\n     * @dev The contract is not initializing.\\r\\n     */\\r\\n    error NotInitializing();\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint64 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\r\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\r\\n     * production.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        // Cache values to avoid duplicated sloads\\r\\n        bool isTopLevelCall = !$._initializing;\\r\\n        uint64 initialized = $._initialized;\\r\\n\\r\\n        // Allowed calls:\\r\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\r\\n        //                 initialized\\r\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\r\\n        //                 current contract is just being deployed\\r\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\r\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\r\\n\\r\\n        if (!initialSetup && !construction) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        $._initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            $._initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            $._initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint64 version) {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        if ($._initializing || $._initialized >= version) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        $._initialized = version;\\r\\n        $._initializing = true;\\r\\n        _;\\r\\n        $._initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        _checkInitializing();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\r\\n     */\\r\\n    function _checkInitializing() internal view virtual {\\r\\n        if (!_isInitializing()) {\\r\\n            revert NotInitializing();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        if ($._initializing) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        if ($._initialized != type(uint64).max) {\\r\\n            $._initialized = type(uint64).max;\\r\\n            emit Initialized(type(uint64).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint64) {\\r\\n        return _getInitializableStorage()._initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _getInitializableStorage()._initializing;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a pointer to the storage namespace.\\r\\n     */\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\r\\n        assembly {\\r\\n            $.slot := INITIALIZABLE_STORAGE\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\r\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\r\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\r\\n *\\r\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\r\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\r\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\r\\n *\\r\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\r\\n */\\r\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    address private immutable __self = address(this);\\r\\n\\r\\n    /**\\r\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\r\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\r\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\r\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\r\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\r\\n     * during an upgrade.\\r\\n     */\\r\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev The call is from an unauthorized context.\\r\\n     */\\r\\n    error UUPSUnauthorizedCallContext();\\r\\n\\r\\n    /**\\r\\n     * @dev The storage `slot` is unsupported as a UUID.\\r\\n     */\\r\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\r\\n\\r\\n    /**\\r\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\r\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\r\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\r\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\r\\n     * fail.\\r\\n     */\\r\\n    modifier onlyProxy() {\\r\\n        _checkProxy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\r\\n     * callable on the implementing contract but not through proxies.\\r\\n     */\\r\\n    modifier notDelegated() {\\r\\n        _checkNotDelegated();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\r\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\r\\n     *\\r\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\r\\n     */\\r\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\r\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\r\\n     * encoded in `data`.\\r\\n     *\\r\\n     * Calls {_authorizeUpgrade}.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     *\\r\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\r\\n        _authorizeUpgrade(newImplementation);\\r\\n        _upgradeToAndCallUUPS(newImplementation, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\r\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\r\\n     * See {_onlyProxy}.\\r\\n     */\\r\\n    function _checkProxy() internal view virtual {\\r\\n        if (\\r\\n            address(this) == __self || // Must be called through delegatecall\\r\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\r\\n        ) {\\r\\n            revert UUPSUnauthorizedCallContext();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the execution is performed via delegatecall.\\r\\n     * See {notDelegated}.\\r\\n     */\\r\\n    function _checkNotDelegated() internal view virtual {\\r\\n        if (address(this) != __self) {\\r\\n            // Must not be called through delegatecall\\r\\n            revert UUPSUnauthorizedCallContext();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\r\\n     * {upgradeToAndCall}.\\r\\n     *\\r\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\r\\n     *\\r\\n     * ```solidity\\r\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\r\\n     * ```\\r\\n     */\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\r\\n     *\\r\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\r\\n     * is expected to be the implementation slot in ERC1967.\\r\\n     *\\r\\n     * Emits an {IERC1967-Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\r\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\r\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\r\\n                revert UUPSUnsupportedProxiableUUID(slot);\\r\\n            }\\r\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\r\\n        } catch {\\r\\n            // The implementation is not UUPS\\r\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\r\\n     */\\r\\n    error AddressInsufficientBalance(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev There's no code at `target` (it is not a contract).\\r\\n     */\\r\\n    error AddressEmptyCode(address target);\\r\\n\\r\\n    /**\\r\\n     * @dev A call to an address target failed. The target may have reverted.\\r\\n     */\\r\\n    error FailedInnerCall();\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        if (address(this).balance < amount) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\r\\n     * up by this function (like regular Solidity function calls). However, if\\r\\n     * the call reverted with no returned reason, this function reverts with a\\r\\n     * {FailedInnerCall} error.\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        if (address(this).balance < value) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\r\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\r\\n     * unsuccessful call.\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            // only check if target is a contract if the call was successful and the return data is empty\\r\\n            // otherwise we already know that it was a contract\\r\\n            if (returndata.length == 0 && target.code.length == 0) {\\r\\n                revert AddressEmptyCode(target);\\r\\n            }\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\r\\n     * revert reason or with a default {FailedInnerCall} error.\\r\\n     */\\r\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\r\\n     */\\r\\n    function _revert(bytes memory returndata) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Library used to query support of an interface declared via {IERC165}.\\r\\n *\\r\\n * Note that these functions return the actual result of the query: they do not\\r\\n * `revert` if an interface is not supported. It is up to the caller to decide\\r\\n * what to do in these cases.\\r\\n */\\r\\nlibrary ERC165Checker {\\r\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\r\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\r\\n     */\\r\\n    function supportsERC165(address account) internal view returns (bool) {\\r\\n        // Any contract that implements ERC165 must explicitly indicate support of\\r\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\r\\n        return\\r\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\r\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports the interface defined by\\r\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\r\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\r\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a boolean array where each value corresponds to the\\r\\n     * interfaces passed in and whether they're supported or not. This allows\\r\\n     * you to batch check interfaces for a contract where your expectation\\r\\n     * is that some interfaces may not be supported.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function getSupportedInterfaces(\\r\\n        address account,\\r\\n        bytes4[] memory interfaceIds\\r\\n    ) internal view returns (bool[] memory) {\\r\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\r\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\r\\n\\r\\n        // query support of ERC165 itself\\r\\n        if (supportsERC165(account)) {\\r\\n            // query support of each interface in interfaceIds\\r\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\r\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return interfaceIdsSupported;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports all the interfaces defined in\\r\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\r\\n     *\\r\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\r\\n     * {IERC165} support.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\r\\n        // query support of ERC165 itself\\r\\n        if (!supportsERC165(account)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // query support of each interface in interfaceIds\\r\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\r\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // all interfaces supported\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\r\\n     * @param account The address of the contract to query for support of an interface\\r\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\r\\n     * @return true if the contract at account indicates support of the interface with\\r\\n     * identifier interfaceId, false otherwise\\r\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\r\\n     * the behavior of this method is undefined. This precondition can be checked\\r\\n     * with {supportsERC165}.\\r\\n     *\\r\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\r\\n     * should be exercised when using this function.\\r\\n     *\\r\\n     * Interface identification is specified in ERC-165.\\r\\n     */\\r\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\r\\n        // prepare call\\r\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\r\\n\\r\\n        // perform static call\\r\\n        bool success;\\r\\n        uint256 returnSize;\\r\\n        uint256 returnValue;\\r\\n        assembly {\\r\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\r\\n            returnSize := returndatasize()\\r\\n            returnValue := mload(0x00)\\r\\n        }\\r\\n\\r\\n        return success && returnSize >= 0x20 && returnValue > 0;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/openzeppelin/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/proxy/EIP173Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\ninterface ERC165 {\\r\\n    function supportsInterface(bytes4 id) external view returns (bool);\\r\\n}\\r\\n\\r\\n///@notice Proxy implementing EIP173 for ownership management\\r\\ncontract EIP173Proxy is Proxy {\\r\\n    // ////////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // /////////////////////// CONSTRUCTOR //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    constructor(\\r\\n        address implementationAddress,\\r\\n        address ownerAddress,\\r\\n        bytes memory data\\r\\n    ) payable {\\r\\n        _setOwner(ownerAddress);\\r\\n        _setImplementation(implementationAddress, data);\\r\\n    }\\r\\n\\r\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return _owner();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\r\\n        if (id == 0x01ffc9a7 || id == 0x7f5828d0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (id == 0xFFFFFFFF) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        ERC165 implementation;\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            implementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n        }\\r\\n\\r\\n        // Technically this is not standard compliant as ERC-165 require 30,000 gas which that call cannot ensure\\r\\n        // because it is itself inside `supportsInterface` that might only get 30,000 gas.\\r\\n        // In practise this is unlikely to be an issue.\\r\\n        try implementation.supportsInterface(id) returns (bool support) {\\r\\n            return support;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function upgradeTo(address newImplementation) external onlyOwner {\\r\\n        _setImplementation(newImplementation, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable onlyOwner {\\r\\n        _setImplementation(newImplementation, data);\\r\\n    }\\r\\n\\r\\n    // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner(), \\\"NOT_AUTHORIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _owner() internal view returns (address adminAddress) {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        address previousOwner = _owner();\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newOwner)\\r\\n        }\\r\\n        emit OwnershipTransferred(previousOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/proxy/EIP173ProxyWithReceive.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./EIP173Proxy.sol\\\";\\r\\n\\r\\n///@notice Proxy implementing EIP173 for ownership management that accept ETH via receive\\r\\ncontract EIP173ProxyWithReceive is EIP173Proxy {\\r\\n    constructor(\\r\\n        address implementationAddress,\\r\\n        address ownerAddress,\\r\\n        bytes memory data\\r\\n    ) payable EIP173Proxy(implementationAddress, ownerAddress, data) {}\\r\\n\\r\\n    receive() external payable override {}\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/proxy/Proxied.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nabstract contract Proxied {\\r\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\r\\n    /// It also allows these functions to be called inside a contructor\\r\\n    /// even if the contract is meant to be used without proxy\\r\\n    modifier proxied() {\\r\\n        address proxyAdminAddress = _proxyAdmin();\\r\\n        // With hardhat-deploy proxies\\r\\n        // the proxyAdminAddress is zero only for the implementation contract\\r\\n        // if the implementation contract want to be used as a standalone/immutable contract\\r\\n        // it simply has to execute the `proxied` function\\r\\n        // This ensure the proxyAdminAddress is never zero post deployment\\r\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\r\\n        if (proxyAdminAddress == address(0)) {\\r\\n            // ensure can not be called twice when used outside of proxy : no admin\\r\\n            // solhint-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                sstore(\\r\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            require(msg.sender == proxyAdminAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProxyAdmin() {\\r\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"solc_0.8/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n// EIP-1967\\r\\nabstract contract Proxy {\\r\\n    // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation);\\r\\n\\r\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        revert(\\\"ETHER_REJECTED\\\"); // explicit reject by default\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _fallback() internal {\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            let implementationAddress := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n            calldatacopy(0x0, 0x0, calldatasize())\\r\\n            let success := delegatecall(gas(), implementationAddress, 0x0, calldatasize(), 0, 0)\\r\\n            let retSz := returndatasize()\\r\\n            returndatacopy(0, 0, retSz)\\r\\n            switch success\\r\\n            case 0 {\\r\\n                revert(0, retSz)\\r\\n            }\\r\\n            default {\\r\\n                return(0, retSz)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setImplementation(address newImplementation, bytes memory data) internal {\\r\\n        address previousImplementation;\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            previousImplementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, newImplementation)\\r\\n        }\\r\\n\\r\\n        emit ProxyImplementationUpdated(previousImplementation, newImplementation);\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            (bool success, ) = newImplementation.delegatecall(data);\\r\\n            if (!success) {\\r\\n                assembly {\\r\\n                    // This assembly ensure the revert contains the exact string data\\r\\n                    let returnDataSize := returndatasize()\\r\\n                    returndatacopy(0, 0, returnDataSize)\\r\\n                    revert(0, returnDataSize)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 999999\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
  "solcInputHash": "e14ac76a5778c8007b13c8b9b81ebb87"
}